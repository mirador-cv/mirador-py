{"name":"Mirador-py","tagline":"A python client for the mirador (http://mirador.im) API","body":"# Mirador-Py\r\nA python client for the Mirador [Image Moderation API](http://mirador.im). To get started, you will need an API Key, available at [mirador.im/join](http://mirador.im/join). For questions about keys or support with this module please email support@mirador.im.\r\n\r\n## Installation\r\n\r\nThe module is available [on pypi](https://pypi.python.org/pypi/Mirador), and can be installed with pip:\r\n\r\n```shell\r\npip install mirador\r\n```\r\n\r\n## Getting started: command-line tool\r\n\r\nFor command-line use, the package installs a script called `mirador-client` that will be added to your path. For usage please enter `mirador-client -h`, basic usage is:\r\n\r\n```shell\r\n$ mirador-client -k YOUR_API_KEY images/*.{jpg,png}`\r\n```\r\n\r\nIn this example, we are classifying all of the images in the `images` directory on your computer. URLs can be specified on the command line, although be careful to escape them in quotes (so that characters aren't interpreted by your shell)\r\n\r\n\r\n## Mirador python module\r\n\r\nThe python module has a simple interface in `mirador.MiradorClient`, documented here.\r\n\r\n\r\n### `mirador.MiradorClient(api_key)`\r\n\r\nThe client supports classification of either images or files, where files can be filenames or file-objects.\r\n\r\n#### `MiradorClient.classify_files(*files) -> [MiradorResult]`\r\n\r\nExample code:\r\n\r\n```python\r\nfrom mirador import MiradorClient\r\n\r\nmc = MiradorClient('your_key_here')\r\nfh = open('pic3.jpg', 'rb')\r\n\r\nfor res in mc.classify_files('pic1.jpg', 'pic2.jpg', fh):\r\n    print \"{name}, {safe}, {value}\".format(**res.__dict__)\r\n```\r\n\r\nHere you can see that the `MiradorResult` object has 3 fields:\r\n\r\n* `MiradorResult.name` - the url or filename used in the request\r\n* `MiradorResult.safe` - (boolean) indicated if image is 'flagged' by API\r\n* `MiradorResult.value` - (float) value 0.0 - 1.0 indicated confidence of decision\r\n\r\n#### `MiradorResult.classify_urls(*urls) -> [MiradorResult]`\r\n\r\nThis has an indentical inteface to `classify_files`, except it expects http/https urls.\r\n\r\n```python\r\nfrom mirador import MiradorClient\r\n\r\nmc = MiradorClient('your_key_here')\r\n\r\nfor res in mc.classify_files('http://example.com/pic2.jpg', 'http://example.com/pic3.jpg'):\r\n    print \"{name}, {safe}, {value}\".format(**res.__dict__)\r\n```\r\n\r\n\r\n## Extensions & Integrations\r\n\r\nWe are in the process of providing extensions and integrations into common frameworks. This package contains an experimental django integration. It is highly advised against use right now, although the code is located in [ext/django.py](mirador/ext/django.py), if you want to take a look.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}